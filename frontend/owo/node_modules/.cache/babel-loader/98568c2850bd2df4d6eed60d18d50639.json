{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-8cb4b07e\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"webrtctag col-4 m0p0 mb-2 mx-1\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"position-relative m0p0\"\n};\nconst _hoisted_3 = {\n  class: \"myreaction\"\n};\nconst _hoisted_4 = {\n  class: \"myname\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ov_video = _resolveComponent(\"ov-video\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" <div class=\\\"m0p0\\\">\\n      <button id=\\\"img\\\" @click=\\\"get_out\\\">\\n        <img style=\\\"width: 25px\\\" src=\\\"@/assets/icon/get_out.png\\\" alt=\\\"\\\" />\\n      </button>\\n    </div> \"), _createCommentVNode(\" <p>개인 WebRTC 영상</p> \"), $props.streamManager ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, _toDisplayString($options.newAllEMojiList[0]), 1\n  /* TEXT */\n  ), _createElementVNode(\"p\", _hoisted_4, \" \" + _toDisplayString($options.clientData) + \" \", 1\n  /* TEXT */\n  ), _createCommentVNode(\" <img class=\\\"mymic\\\" v-if=\\\"!mic\\\" src=\\\"@/assets/icon/micmute.png\\\" alt=\\\"\\\"> \"), _createCommentVNode(\" eslint-disable-next-line \"), _createVNode(_component_ov_video, {\n    class: \"ov-video\",\n    \"stream-manager\": $props.streamManager\n  }, null, 8\n  /* PROPS */\n  , [\"stream-manager\"])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;;EAOiBA,KAAK,EAAC;;;EACzBA,KAAK,EAAC;;;EACRA,KAAK,EAAC;;;;;uBATbC,oBAcM,KAdN,cAcM,CAbJC,0MAaI,EARJA,4CAQI,EAPOC,sCAAXF,oBAMM,KANN,cAMM,CALJG,oBAAoD,KAApD,cAAoDC,iBAA1BC,yBAAe,CAAf,CAA0B,CAApD,EAAyC;EAAA;EAAzC,CAKI,EAJJF,oBAAkD,GAAlD,cAAkB,MAAMC,iBAAGC,mBAAH,CAAN,GAAsB,GAAxC,EAA8C;EAAA;EAA9C,CAII,EAHJJ,uGAGI,EAFJA,iDAEI,EADJK,aAA6DC,mBAA7D,EAA6D;IAAnDR,KAAK,EAAC,UAA6C;IAAjC,kBAAgBG;EAAiB,CAA7D;;EAAA,qBACI,CANN,sCAOI,CAdN","names":["class","_createElementBlock","_createCommentVNode","$props","_createElementVNode","_toDisplayString","$options","_createVNode","_component_ov_video"],"sourceRoot":"","sources":["C:\\Users\\multicampus\\Desktop\\새 폴더2\\S07P12C202\\frontend\\owo\\src\\components\\Room\\WebRTC.vue"],"sourcesContent":["<template>\n  <div class=\"webrtctag col-4 m0p0 mb-2 mx-1\">\n    <!-- <div class=\"m0p0\">\n      <button id=\"img\" @click=\"get_out\">\n        <img style=\"width: 25px\" src=\"@/assets/icon/get_out.png\" alt=\"\" />\n      </button>\n    </div> -->\n    <!-- <p>개인 WebRTC 영상</p> -->\n    <div v-if=\"streamManager\" class=\"position-relative m0p0\">\n      <div class=\"myreaction\">{{newAllEMojiList[0]}}</div>\n      <p class=\"myname\">&ensp;{{ clientData }}&ensp;</p>\n      <!-- <img class=\"mymic\" v-if=\"!mic\" src=\"@/assets/icon/micmute.png\" alt=\"\"> -->\n      <!-- eslint-disable-next-line -->\n      <ov-video class=\"ov-video\" :stream-manager=\"streamManager\" />\r\n    </div>\n  </div>\n</template>\n<script>\nimport { mapState } from 'vuex';\nimport OvVideo from './OvVideo.vue';\n\nconst emoji = 'emoji';\n// const meetingroom = 'meetingroom';\n\nexport default {\n  components: {\n    OvVideo,\n  },\n  data() {\n    return {\n      user_isActive: false,\n      user_get_out: false,\n    };\n  },\n  setup() {},\n  created() {},\n  moundted() {},\n  unmounted() {},\n  methods: {\n    get_out() {\n      alert('추방하시겠습니까?');\n      // alert 대신 confirm으로 별경한다.\n      // const getout = confirm('추방하시겠습니까?')\n      // comfirm 받은 것을 넘겨서 추방할 수 있도록 한다.\n    },\n    getConnectionData() {\n      const { connection } = this.streamManager.stream;\n      return JSON.parse(connection.data);\n    },\n  },\n\n  computed: {\n    ...mapState(emoji, ['allEmojiList']),\n    // ...mapState(meetingroom, ['mic']),\n    newAllEMojiList() {\n      const newList = [];\n      for (let i = this.allEmojiList.length - 1; i >= 0; i -= 1) {\n        if (this.allEmojiList[i][0] === this.clientData) {\n          newList.push(this.allEmojiList[i][1]);\n          break;\n        }\n      }\n      return newList;\n    },\n    clientData() {\n      const { clientData } = this.getConnectionData();\n      return clientData;\n    },\n  },\n  props: {\n    streamManager: Object,\n  },\n};\n</script>\n<style scoped>\n#img {\n  position: absolute;\n  top: 5%;\n  left: 88%;\n  border: 0;\n  outline: 0;\n  opacity: 0;\n  z-index:100;\n}\n\n.m0p0 {\n  margin:0;\n  padding:0;\n  border-radius: 10px;\n}\n\n#img:hover {\n  opacity: 1;\n}\n\n.webrtctag {\n  width:520px;\n  height:360px;\n  border-radius: 20px;\n  border: 3px solid #4e8aff;\n  background-color:#eaf1ff;\n}\n\n.myname {\n  position:absolute;\n  top:-2px;\n  left:-2px;\n  background-color:#4e8aff;\n  font-size:24px;\n  border-radius: 20px 0px 10px 0px;\n  z-index:600;\n}\n\n.myreaction {\n  position:absolute;\n  height:100%;\n  top:0px;\n  right:0px;\n  font-size:150px;\n  z-index:700;\n}\n\n.ov-video {\n  width: 100.2%;\n  border-radius: 20px;\n  position:relative;\n  top:-1px;\n  left:-1px;\n  z-index:500;\n}\n\n.mymic {\n  position:absolute;\n  bottom:20px;\n  right:10px;\n  font-size:15px;\n  width:50px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}