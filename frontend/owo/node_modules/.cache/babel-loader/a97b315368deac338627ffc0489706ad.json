{"ast":null,"code":"import { withKeys as _withKeys, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"emoji-mart-search\"\n};\nconst _hoisted_2 = [\"placeholder\"];\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"span\", {\n  class: \"hidden\",\n  id: \"emoji-picker-search-description\"\n}, \"Use the left, right, up and down arrow keys to navigate the emoji search results.\", -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    placeholder: $props.i18n.search,\n    role: \"textbox\",\n    \"aria-autocomplete\": \"list\",\n    \"aria-owns\": \"emoji-mart-list\",\n    \"aria-label\": \"Search for an emoji\",\n    \"aria-describedby\": \"emoji-mart-search-description\",\n    onKeydown: [_cache[0] || (_cache[0] = _withKeys($event => _ctx.$emit('arrowLeft', $event), [\"left\"])), _cache[1] || (_cache[1] = _withKeys(() => _ctx.$emit('arrowRight'), [\"right\"])), _cache[2] || (_cache[2] = _withKeys(() => _ctx.$emit('arrowDown'), [\"down\"])), _cache[3] || (_cache[3] = _withKeys($event => _ctx.$emit('arrowUp', $event), [\"up\"])), _cache[4] || (_cache[4] = _withKeys(() => _ctx.$emit('enter'), [\"enter\"]))],\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.value = $event)\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_2), [[_vModelText, $data.value]]), _hoisted_3]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;;gCAgBTC,oBAGC,MAHD,EAGC;EAHKD,KAAK,EAAC,QAGX;EAHoBE,EAAE,EAAC;AAGvB,CAHD,EACG,mFADH,EAEU;AAAA;AAFV;;;uBAhBFC,oBAoBM,KApBN,cAoBM,iBAnBJF,oBAcE,OAdF,EAcE;IAbAG,IAAI,EAAC,MAaL;IAZCC,WAAW,EAAEC,YAAKC,MAYnB;IAXAC,IAAI,EAAC,SAWL;IAVA,qBAAkB,MAUlB;IATA,aAAU,iBASV;IARA,cAAW,qBAQX;IAPA,oBAAiB,+BAOjB;IANCC,SAAO,uCAAQC,UAAWC,WAAK,WAAL,EAAmBD,MAAnB,GAAyB,UAA5C,4CACcC,WAAK,YAAL,GAAK,WADnB,4CAEaA,WAAK,WAAL,GAAK,UAFlB,sCAGMD,UAAWC,WAAK,SAAL,EAAiBD,MAAjB,GAAuB,QAHxC,4CAIcC,WAAK,OAAL,GAAK,WAJnB,CAMR;+DADSC,cAAKF;EACd,CAdF;;EAAA,8BAaWE,cAMP,EAJJC,UAII,CApBN","names":["class","_createElementVNode","id","_createElementBlock","type","placeholder","$props","search","role","onKeydown","$event","_ctx","$data","_hoisted_3"],"sourceRoot":"","sources":["C:\\Users\\multicampus\\Desktop\\새 폴더2\\S07P12C202\\frontend\\owo\\node_modules\\emoji-mart-vue-fast\\src\\components\\search.vue"],"sourcesContent":["<template>\n  <div class=\"emoji-mart-search\">\n    <input\n      type=\"text\"\n      :placeholder=\"i18n.search\"\n      role=\"textbox\"\n      aria-autocomplete=\"list\"\n      aria-owns=\"emoji-mart-list\"\n      aria-label=\"Search for an emoji\"\n      aria-describedby=\"emoji-mart-search-description\"\n      @keydown.left=\"($event) => $emit('arrowLeft', $event)\"\n      @keydown.right=\"() => $emit('arrowRight')\"\n      @keydown.down=\"() => $emit('arrowDown')\"\n      @keydown.up=\"($event) => $emit('arrowUp', $event)\"\n      @keydown.enter=\"() => $emit('enter')\"\n      v-model=\"value\"\n    />\n    <span class=\"hidden\" id=\"emoji-picker-search-description\"\n      >Use the left, right, up and down arrow keys to navigate the emoji search\n      results.</span\n    >\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    data: {\n      type: Object,\n      required: true,\n    },\n    i18n: {\n      type: Object,\n      required: true,\n    },\n    autoFocus: {\n      type: Boolean,\n      default: false,\n    },\n    onSearch: {\n      type: Function,\n      required: true,\n    },\n    onArrowLeft: {\n      type: Function,\n      required: false,\n    },\n    onArrowRight: {\n      type: Function,\n      required: false,\n    },\n    onArrowDown: {\n      type: Function,\n      required: false,\n    },\n    onArrowUp: {\n      type: Function,\n      required: false,\n    },\n    onEnter: {\n      type: Function,\n      required: false,\n    },\n  },\n  data() {\n    return {\n      value: '',\n    }\n  },\n  computed: {\n    emojiIndex() {\n      return this.data\n    },\n  },\n  watch: {\n    value() {\n      this.$emit('search', this.value)\n    },\n  },\n  methods: {\n    clear() {\n      this.value = ''\n    },\n  },\n  mounted() {\n    let $input = this.$el.querySelector('input')\n\n    if (this.autoFocus) {\n      $input.focus()\n    }\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}