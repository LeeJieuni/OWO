{"ast":null,"code":"import '../vendor/raf-polyfill';\nimport store from '../utils/store';\nimport frequently from '../utils/frequently';\nimport { deepMerge, measureScrollbar } from '../utils';\nimport { PickerProps } from '../utils/shared-props';\nimport { PickerView } from '../utils/picker';\nimport Anchors from './anchors.vue';\nimport Category from './category.vue';\nimport Preview from './preview.vue';\nimport Search from './search.vue';\nconst I18N = {\n  search: 'Search',\n  notfound: 'No Emoji Found',\n  categories: {\n    search: 'Search Results',\n    recent: 'Frequently Used',\n    smileys: 'Smileys & Emotion',\n    people: 'People & Body',\n    nature: 'Animals & Nature',\n    foods: 'Food & Drink',\n    activity: 'Activity',\n    places: 'Travel & Places',\n    objects: 'Objects',\n    symbols: 'Symbols',\n    flags: 'Flags',\n    custom: 'Custom'\n  }\n};\nexport default {\n  props: { ...PickerProps,\n    data: {\n      type: Object,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      activeSkin: this.skin || store.get('skin') || this.defaultSkin,\n      view: new PickerView(this)\n    };\n  },\n\n  computed: {\n    customStyles() {\n      return {\n        width: this.calculateWidth + 'px',\n        ...this.pickerStyles\n      };\n    },\n\n    emojiProps() {\n      return {\n        native: this.native,\n        skin: this.activeSkin,\n        set: this.set,\n        emojiTooltip: this.emojiTooltip,\n        emojiSize: this.emojiSize,\n        selectedEmoji: this.view.previewEmoji,\n        selectedEmojiCategory: this.view.previewEmojiCategory,\n        onEnter: this.onEmojiEnter.bind(this),\n        onLeave: this.onEmojiLeave.bind(this),\n        onClick: this.onEmojiClick.bind(this)\n      };\n    },\n\n    skinProps() {\n      return {\n        skin: this.activeSkin\n      };\n    },\n\n    calculateWidth() {\n      return this.perLine * (this.emojiSize + 12) + 12 + 2 + measureScrollbar();\n    },\n\n    // emojisPerRow() {\n    //   const listEl = this.$refs.scrollContent\n    //   const emojiEl = listEl.querySelector('.emoji-mart-emoji')\n    //   return Math.floor(listEl.offsetWidth / emojiEl.offsetWidth)\n    // },\n    filteredCategories() {\n      return this.view.filteredCategories;\n    },\n\n    mergedI18n() {\n      return Object.freeze(deepMerge(I18N, this.i18n));\n    },\n\n    idleEmoji() {\n      try {\n        return this.data.emoji(this.emoji);\n      } catch (e) {\n        console.error('Default preview emoji `' + this.emoji + '` is not available, check the Picker `emoji` property');\n        console.error(e);\n        return this.data.firstEmoji();\n      }\n    }\n\n  },\n  methods: {\n    onScroll() {\n      if (this.infiniteScroll && !this.waitingForPaint) {\n        this.waitingForPaint = true;\n        window.requestAnimationFrame(this.onScrollPaint.bind(this));\n      }\n    },\n\n    onScrollPaint() {\n      this.waitingForPaint = false;\n      this.view.onScroll();\n    },\n\n    onAnchorClick(category) {\n      this.view.onAnchorClick(category);\n    },\n\n    onSearch(value) {\n      this.view.onSearch(value);\n    },\n\n    onEmojiEnter(emoji) {\n      this.view.onEmojiEnter(emoji);\n    },\n\n    onEmojiLeave(emoji) {\n      this.view.onEmojiLeave(emoji);\n    },\n\n    onArrowLeft($event) {\n      const oldIdx = this.view.previewEmojiIdx;\n      this.view.onArrowLeft();\n\n      if ($event && this.view.previewEmojiIdx !== oldIdx) {\n        // Prevent cursor movement inside the input\n        $event.preventDefault();\n      }\n    },\n\n    onArrowRight() {\n      this.view.onArrowRight();\n    },\n\n    onArrowDown() {\n      this.view.onArrowDown();\n    },\n\n    onArrowUp($event) {\n      this.view.onArrowUp(); // Prevent cursor movement inside the input\n\n      $event.preventDefault();\n    },\n\n    onEnter(emoji) {\n      this.$emit('select', this.view.previewEmoji);\n      frequently.add(this.view.previewEmoji);\n    },\n\n    onEmojiClick(emoji) {\n      this.$emit('select', emoji);\n      frequently.add(emoji);\n    },\n\n    onSkinChange(skin) {\n      this.activeSkin = skin;\n      store.update({\n        skin\n      });\n      this.$emit('skin-change', skin);\n    },\n\n    getCategoryComponent(index) {\n      let component = this.$refs['categories_' + index];\n\n      if (component && '0' in component) {\n        // Vue 2 has $refs under v-for as an array.\n        return component['0'];\n      } // Vue 3 does not support $refs as array.\n\n\n      return component;\n    }\n\n  },\n  components: {\n    Anchors,\n    Category,\n    Preview,\n    Search\n  }\n};","map":{"version":3,"mappings":"AA2FA,OAAO,wBAAP;AACA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,UAA5C;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,IAAG,GAAI;EACXC,MAAM,EAAE,QADG;EAEXC,QAAQ,EAAE,gBAFC;EAGXC,UAAU,EAAE;IACVF,MAAM,EAAE,gBADE;IAEVG,MAAM,EAAE,iBAFE;IAGVC,OAAO,EAAE,mBAHC;IAIVC,MAAM,EAAE,eAJE;IAKVC,MAAM,EAAE,kBALE;IAMVC,KAAK,EAAE,cANG;IAOVC,QAAQ,EAAE,UAPA;IAQVC,MAAM,EAAE,iBARE;IASVC,OAAO,EAAE,SATC;IAUVC,OAAO,EAAE,SAVC;IAWVC,KAAK,EAAE,OAXG;IAYVC,MAAM,EAAE;EAZE;AAHD,CAAb;AAmBA,eAAe;EACbC,KAAK,EAAE,EACL,GAAGrB,WADE;IAELsB,IAAI,EAAE;MACJC,IAAI,EAAEC,MADF;MAEJC,QAAQ,EAAE;IAFN;EAFD,CADM;;EAQbH,IAAI,GAAG;IACL,OAAO;MACLI,UAAU,EAAE,KAAKC,IAAL,IAAa/B,KAAK,CAACgC,GAAN,CAAU,MAAV,CAAb,IAAkC,KAAKC,WAD9C;MAELC,IAAI,EAAE,IAAI7B,UAAJ,CAAe,IAAf;IAFD,CAAP;EAID,CAbY;;EAcb8B,QAAQ,EAAE;IACRC,YAAY,GAAG;MACb,OAAO;QACLC,KAAK,EAAE,KAAKC,cAAL,GAAsB,IADxB;QAEL,GAAG,KAAKC;MAFH,CAAP;IAID,CANO;;IAORC,UAAU,GAAG;MACX,OAAO;QACLC,MAAM,EAAE,KAAKA,MADR;QAELV,IAAI,EAAE,KAAKD,UAFN;QAGLY,GAAG,EAAE,KAAKA,GAHL;QAILC,YAAY,EAAE,KAAKA,YAJd;QAKLC,SAAS,EAAE,KAAKA,SALX;QAMLC,aAAa,EAAE,KAAKX,IAAL,CAAUY,YANpB;QAOLC,qBAAqB,EAAE,KAAKb,IAAL,CAAUc,oBAP5B;QAQLC,OAAO,EAAE,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CARJ;QASLC,OAAO,EAAE,KAAKC,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CATJ;QAULG,OAAO,EAAE,KAAKC,YAAL,CAAkBJ,IAAlB,CAAuB,IAAvB;MAVJ,CAAP;IAYD,CApBO;;IAqBRK,SAAS,GAAG;MACV,OAAO;QACLzB,IAAI,EAAE,KAAKD;MADN,CAAP;IAGD,CAzBO;;IA0BRQ,cAAc,GAAG;MACf,OAAO,KAAKmB,OAAL,IAAgB,KAAKb,SAAL,GAAiB,EAAjC,IAAuC,EAAvC,GAA4C,CAA5C,GAAgDzC,gBAAgB,EAAvE;IACD,CA5BO;;IA6BR;IACA;IACA;IACA;IACA;IACAuD,kBAAkB,GAAG;MACnB,OAAO,KAAKxB,IAAL,CAAUwB,kBAAjB;IACD,CApCO;;IAqCRC,UAAU,GAAG;MACX,OAAO/B,MAAM,CAACgC,MAAP,CAAc1D,SAAS,CAACQ,IAAD,EAAO,KAAKmD,IAAZ,CAAvB,CAAP;IACD,CAvCO;;IAwCRC,SAAS,GAAG;MACV,IAAI;QACF,OAAO,KAAKpC,IAAL,CAAUqC,KAAV,CAAgB,KAAKA,KAArB,CAAP;MACF,CAFA,CAEE,OAAOC,CAAP,EAAU;QACVC,OAAO,CAACC,KAAR,CACE,4BACE,KAAKH,KADP,GAEE,uDAHJ;QAKAE,OAAO,CAACC,KAAR,CAAcF,CAAd;QACA,OAAO,KAAKtC,IAAL,CAAUyC,UAAV,EAAP;MACF;IACD;;EApDO,CAdG;EAoEbC,OAAO,EAAE;IACPC,QAAQ,GAAG;MACT,IAAI,KAAKC,cAAL,IAAuB,CAAC,KAAKC,eAAjC,EAAkD;QAChD,KAAKA,eAAL,GAAuB,IAAvB;QACAC,MAAM,CAACC,qBAAP,CAA6B,KAAKC,aAAL,CAAmBvB,IAAnB,CAAwB,IAAxB,CAA7B;MACF;IACD,CANM;;IAOPuB,aAAa,GAAG;MACd,KAAKH,eAAL,GAAuB,KAAvB;MACA,KAAKrC,IAAL,CAAUmC,QAAV;IACD,CAVM;;IAWPM,aAAa,CAACC,QAAD,EAAW;MACtB,KAAK1C,IAAL,CAAUyC,aAAV,CAAwBC,QAAxB;IACD,CAbM;;IAcPC,QAAQ,CAACC,KAAD,EAAQ;MACd,KAAK5C,IAAL,CAAU2C,QAAV,CAAmBC,KAAnB;IACD,CAhBM;;IAiBP5B,YAAY,CAACa,KAAD,EAAQ;MAClB,KAAK7B,IAAL,CAAUgB,YAAV,CAAuBa,KAAvB;IACD,CAnBM;;IAoBPV,YAAY,CAACU,KAAD,EAAQ;MAClB,KAAK7B,IAAL,CAAUmB,YAAV,CAAuBU,KAAvB;IACD,CAtBM;;IAuBPgB,WAAW,CAACC,MAAD,EAAS;MAClB,MAAMC,MAAK,GAAI,KAAK/C,IAAL,CAAUgD,eAAzB;MACA,KAAKhD,IAAL,CAAU6C,WAAV;;MACA,IAAIC,MAAK,IAAK,KAAK9C,IAAL,CAAUgD,eAAV,KAA8BD,MAA5C,EAAoD;QAClD;QACAD,MAAM,CAACG,cAAP;MACF;IACD,CA9BM;;IA+BPC,YAAY,GAAG;MACb,KAAKlD,IAAL,CAAUkD,YAAV;IACD,CAjCM;;IAkCPC,WAAW,GAAG;MACZ,KAAKnD,IAAL,CAAUmD,WAAV;IACD,CApCM;;IAqCPC,SAAS,CAACN,MAAD,EAAS;MAChB,KAAK9C,IAAL,CAAUoD,SAAV,GADgB,CAEhB;;MACAN,MAAM,CAACG,cAAP;IACD,CAzCM;;IA0CPlC,OAAO,CAACc,KAAD,EAAQ;MACb,KAAKwB,KAAL,CAAW,QAAX,EAAqB,KAAKrD,IAAL,CAAUY,YAA/B;MACA7C,UAAU,CAACuF,GAAX,CAAe,KAAKtD,IAAL,CAAUY,YAAzB;IACD,CA7CM;;IA8CPS,YAAY,CAACQ,KAAD,EAAQ;MAClB,KAAKwB,KAAL,CAAW,QAAX,EAAqBxB,KAArB;MACA9D,UAAU,CAACuF,GAAX,CAAezB,KAAf;IACD,CAjDM;;IAkDP0B,YAAY,CAAC1D,IAAD,EAAO;MACjB,KAAKD,UAAL,GAAkBC,IAAlB;MACA/B,KAAK,CAAC0F,MAAN,CAAa;QAAE3D;MAAF,CAAb;MAEA,KAAKwD,KAAL,CAAW,aAAX,EAA0BxD,IAA1B;IACD,CAvDM;;IAwDP4D,oBAAoB,CAACC,KAAD,EAAQ;MAC1B,IAAIC,SAAQ,GAAI,KAAKC,KAAL,CAAW,gBAAgBF,KAA3B,CAAhB;;MACA,IAAIC,SAAQ,IAAK,OAAOA,SAAxB,EAAmC;QACjC;QACA,OAAOA,SAAS,CAAC,GAAD,CAAhB;MACF,CAL0B,CAM1B;;;MACA,OAAOA,SAAP;IACD;;EAhEM,CApEI;EAsIbE,UAAU,EAAE;IACVzF,OADU;IAEVC,QAFU;IAGVC,OAHU;IAIVC;EAJU;AAtIC,CAAf","names":["store","frequently","deepMerge","measureScrollbar","PickerProps","PickerView","Anchors","Category","Preview","Search","I18N","search","notfound","categories","recent","smileys","people","nature","foods","activity","places","objects","symbols","flags","custom","props","data","type","Object","required","activeSkin","skin","get","defaultSkin","view","computed","customStyles","width","calculateWidth","pickerStyles","emojiProps","native","set","emojiTooltip","emojiSize","selectedEmoji","previewEmoji","selectedEmojiCategory","previewEmojiCategory","onEnter","onEmojiEnter","bind","onLeave","onEmojiLeave","onClick","onEmojiClick","skinProps","perLine","filteredCategories","mergedI18n","freeze","i18n","idleEmoji","emoji","e","console","error","firstEmoji","methods","onScroll","infiniteScroll","waitingForPaint","window","requestAnimationFrame","onScrollPaint","onAnchorClick","category","onSearch","value","onArrowLeft","$event","oldIdx","previewEmojiIdx","preventDefault","onArrowRight","onArrowDown","onArrowUp","$emit","add","onSkinChange","update","getCategoryComponent","index","component","$refs","components"],"sourceRoot":"","sources":["C:\\Users\\multicampus\\Desktop\\새 폴더2\\S07P12C202\\frontend\\owo\\node_modules\\emoji-mart-vue-fast\\src\\components\\Picker.vue"],"sourcesContent":["<template>\n  <section class=\"emoji-mart emoji-mart-static\" :style=\"customStyles\">\n    <div class=\"emoji-mart-bar emoji-mart-bar-anchors\" v-if=\"showCategories\">\n      <anchors\n        :data=\"data\"\n        :i18n=\"mergedI18n\"\n        :color=\"color\"\n        :categories=\"view.allCategories\"\n        :active-category=\"view.activeCategory\"\n        @click=\"onAnchorClick\"\n      />\n    </div>\n\n    <slot\n      name=\"searchTemplate\"\n      :data=\"data\"\n      :i18n=\"i18n\"\n      :auto-focus=\"autoFocus\"\n      :on-search=\"onSearch\"\n    >\n      <search\n        v-if=\"showSearch\"\n        ref=\"search\"\n        :data=\"data\"\n        :i18n=\"mergedI18n\"\n        :auto-focus=\"autoFocus\"\n        :on-search=\"onSearch\"\n        @search=\"onSearch\"\n        @arrowLeft=\"onArrowLeft\"\n        @arrowRight=\"onArrowRight\"\n        @arrowDown=\"onArrowDown\"\n        @arrowUp=\"onArrowUp\"\n        @enter=\"onEnter\"\n      />\n    </slot>\n\n    <div\n      role=\"tabpanel\"\n      class=\"emoji-mart-scroll\"\n      ref=\"scroll\"\n      @scroll=\"onScroll\"\n    >\n      <div\n        id=\"emoji-mart-list\"\n        ref=\"scrollContent\"\n        role=\"listbox\"\n        aria-expanded=\"true\"\n      >\n        <category\n          v-for=\"(category, idx) in view.filteredCategories\"\n          v-show=\"infiniteScroll || category == view.activeCategory\"\n          :ref=\"'categories_' + idx\"\n          :key=\"category.id\"\n          :data=\"data\"\n          :i18n=\"mergedI18n\"\n          :id=\"category.id\"\n          :name=\"category.name\"\n          :emojis=\"category.emojis\"\n          :emoji-props=\"emojiProps\"\n        />\n      </div>\n    </div>\n\n    <slot\n      name=\"previewTemplate\"\n      :data=\"data\"\n      :title=\"title\"\n      :emoji=\"view.previewEmoji\"\n      :idle-emoji=\"idleEmoji\"\n      :show-skin-tones=\"showSkinTones\"\n      :emoji-props=\"emojiProps\"\n      :skin-props=\"skinProps\"\n      :on-skin-change=\"onSkinChange\"\n    >\n      <div class=\"emoji-mart-bar emoji-mart-bar-preview\" v-if=\"showPreview\">\n        <preview\n          :data=\"data\"\n          :title=\"title\"\n          :emoji=\"view.previewEmoji\"\n          :idle-emoji=\"idleEmoji\"\n          :show-skin-tones=\"showSkinTones\"\n          :emoji-props=\"emojiProps\"\n          :skin-props=\"skinProps\"\n          :on-skin-change=\"onSkinChange\"\n        />\n      </div>\n    </slot>\n  </section>\n</template>\n\n<script>\nimport '../vendor/raf-polyfill'\nimport store from '../utils/store'\nimport frequently from '../utils/frequently'\nimport { deepMerge, measureScrollbar } from '../utils'\nimport { PickerProps } from '../utils/shared-props'\nimport { PickerView } from '../utils/picker'\nimport Anchors from './anchors.vue'\nimport Category from './category.vue'\nimport Preview from './preview.vue'\nimport Search from './search.vue'\n\nconst I18N = {\n  search: 'Search',\n  notfound: 'No Emoji Found',\n  categories: {\n    search: 'Search Results',\n    recent: 'Frequently Used',\n    smileys: 'Smileys & Emotion',\n    people: 'People & Body',\n    nature: 'Animals & Nature',\n    foods: 'Food & Drink',\n    activity: 'Activity',\n    places: 'Travel & Places',\n    objects: 'Objects',\n    symbols: 'Symbols',\n    flags: 'Flags',\n    custom: 'Custom',\n  },\n}\n\nexport default {\n  props: {\n    ...PickerProps,\n    data: {\n      type: Object,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      activeSkin: this.skin || store.get('skin') || this.defaultSkin,\n      view: new PickerView(this),\n    }\n  },\n  computed: {\n    customStyles() {\n      return {\n        width: this.calculateWidth + 'px',\n        ...this.pickerStyles,\n      }\n    },\n    emojiProps() {\n      return {\n        native: this.native,\n        skin: this.activeSkin,\n        set: this.set,\n        emojiTooltip: this.emojiTooltip,\n        emojiSize: this.emojiSize,\n        selectedEmoji: this.view.previewEmoji,\n        selectedEmojiCategory: this.view.previewEmojiCategory,\n        onEnter: this.onEmojiEnter.bind(this),\n        onLeave: this.onEmojiLeave.bind(this),\n        onClick: this.onEmojiClick.bind(this),\n      }\n    },\n    skinProps() {\n      return {\n        skin: this.activeSkin,\n      }\n    },\n    calculateWidth() {\n      return this.perLine * (this.emojiSize + 12) + 12 + 2 + measureScrollbar()\n    },\n    // emojisPerRow() {\n    //   const listEl = this.$refs.scrollContent\n    //   const emojiEl = listEl.querySelector('.emoji-mart-emoji')\n    //   return Math.floor(listEl.offsetWidth / emojiEl.offsetWidth)\n    // },\n    filteredCategories() {\n      return this.view.filteredCategories\n    },\n    mergedI18n() {\n      return Object.freeze(deepMerge(I18N, this.i18n))\n    },\n    idleEmoji() {\n      try {\n        return this.data.emoji(this.emoji)\n      } catch (e) {\n        console.error(\n          'Default preview emoji `' +\n            this.emoji +\n            '` is not available, check the Picker `emoji` property',\n        )\n        console.error(e)\n        return this.data.firstEmoji()\n      }\n    },\n  },\n  methods: {\n    onScroll() {\n      if (this.infiniteScroll && !this.waitingForPaint) {\n        this.waitingForPaint = true\n        window.requestAnimationFrame(this.onScrollPaint.bind(this))\n      }\n    },\n    onScrollPaint() {\n      this.waitingForPaint = false\n      this.view.onScroll()\n    },\n    onAnchorClick(category) {\n      this.view.onAnchorClick(category)\n    },\n    onSearch(value) {\n      this.view.onSearch(value)\n    },\n    onEmojiEnter(emoji) {\n      this.view.onEmojiEnter(emoji)\n    },\n    onEmojiLeave(emoji) {\n      this.view.onEmojiLeave(emoji)\n    },\n    onArrowLeft($event) {\n      const oldIdx = this.view.previewEmojiIdx\n      this.view.onArrowLeft()\n      if ($event && this.view.previewEmojiIdx !== oldIdx) {\n        // Prevent cursor movement inside the input\n        $event.preventDefault()\n      }\n    },\n    onArrowRight() {\n      this.view.onArrowRight()\n    },\n    onArrowDown() {\n      this.view.onArrowDown()\n    },\n    onArrowUp($event) {\n      this.view.onArrowUp()\n      // Prevent cursor movement inside the input\n      $event.preventDefault()\n    },\n    onEnter(emoji) {\n      this.$emit('select', this.view.previewEmoji)\n      frequently.add(this.view.previewEmoji)\n    },\n    onEmojiClick(emoji) {\n      this.$emit('select', emoji)\n      frequently.add(emoji)\n    },\n    onSkinChange(skin) {\n      this.activeSkin = skin\n      store.update({ skin })\n\n      this.$emit('skin-change', skin)\n    },\n    getCategoryComponent(index) {\n      let component = this.$refs['categories_' + index]\n      if (component && '0' in component) {\n        // Vue 2 has $refs under v-for as an array.\n        return component['0']\n      }\n      // Vue 3 does not support $refs as array.\n      return component\n    },\n  },\n  components: {\n    Anchors,\n    Category,\n    Preview,\n    Search,\n  },\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}