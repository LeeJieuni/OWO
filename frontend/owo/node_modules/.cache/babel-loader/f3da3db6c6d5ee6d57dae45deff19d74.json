{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { intersect, unifiedToNative } from './index';\nimport { uncompress, buildSearch } from './data';\nimport frequently from './frequently';\nconst SHEET_COLUMNS = 61;\nconst COLONS_REGEX = /^(?:\\:([^\\:]+)\\:)(?:\\:skin-tone-(\\d)\\:)?$/; // Skin tones\n\nconst SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\n/**\n * Emoji data structure:\n * {\n *    \"compressed\": false,\n *    \"aliases\": {\n *      collision: \"boom\"\n *      cooking: \"fried_egg\"\n *      envelope: \"email\"\n *      face_with_finger_covering_closed_lips: \"shushing_face\"\n *      ...\n *    },\n *    \"categories\": [ {\n *      id: \"people\",\n *      name: \"Smileys & Emotion\",\n *      emojis: [ \"grinning\", \"grin\", \"joy\", ... ]\n *    }, {\n *      id: \"nature\",\n *      name: \"Animals & Nature\",\n *      emojis: [ \"monkey_face\", \"money\", \"gorilla\", ... ]\n *    },\n *    ...\n *    ],\n *    \"emojis\": [\n *      smiley: {\n *        added_in: \"6.0\",\n *        emoticons: [\"=)\", \"=-)\"],\n *        has_img_apple: true,\n *        has_img_facebook: true,\n *        has_img_google: true,\n *        has_img_twitter: true,\n *        keywords: [\"face\", \"happy\", \"joy\", \"haha\", \":D\", \":)\", \"smile\", \"funny\"],\n *        name: \"Smiling Face with Open Mouth\",\n *        non_qualified: undefined,\n *        search: \"smiley,smiling,face,with,open,mouth,happy,joy,haha,:d,:),smile,funny,=),=-)\",\n *        sheet_x: 30,\n *        sheet_y: 27,\n *        short_names: [\"smiley\"],\n *        text: \":)\",\n *        unified: \"1F603\",\n *      }, {\n *      +1: {    // emoji with skin_variations\n *          ..., // all the regular fields are present\n *          name: \"Thumbs Up Sign\",\n *          short_names: (2) [\"+1\", \"thumbsup\"],\n *          skin_variations: {\n *            1F3FB:             // each variation has additional set of fields:\n *              added_in: \"8.0\",\n *              has_img_apple: true,\n *              has_img_facebook: true,\n *              has_img_google: true,\n *              has_img_twitter: true,\n *              image: \"1f44d-1f3fb.png\",\n *              non_qualified: null,\n *              sheet_x: 14,\n *              sheet_y: 50,\n *              unified: \"1F44D-1F3FB\",\n *            1F3FB: {…},\n *            1F3FC: {…},\n *            1F3FD: {…},\n *            1F3FE: {…},\n *            1F3FF: {…}\n *            },\n *          ...\n *      },\n *      a: {  // emoji with non_qualified field set\n *        added_in: \"6.0\",\n *        emoticons: undefined,\n *        has_img_apple: true,\n *        ...\n *        non_qualified: \"1F170\",\n *        unified: \"1F170-FE0F\",\n *     },\n *     ...\n *   ]\n * }\n */\n\n/**\n * Wraps raw jason emoji data, serves as data source for\n * emoji picker components.\n *\n * Usage:\n *\n *   import data from '../data/all.json'\n *   let index = new EmojiIndex(data)\n *\n */\n\nexport class EmojiIndex {\n  /**\n   * Constructor.\n   *\n   * @param {object} data - Raw json data, see the structure above.\n   * @param {object} options - additional options, as an object:\n   * @param {Function} emojisToShowFilter - optional, function to filter out\n   *   some emojis, function(emoji) { return true|false }\n   *   where `emoji` is an raw emoji object, see data.emojis above.\n   * @param {Array} include - optional, a list of category ids to include.\n   * @param {Array} exclude - optional, a list of category ids to exclude.\n   * @param {Array} custom - optional, a list custom emojis, each emoji is\n   *   an object, see data.emojis above for examples.\n   */\n  constructor(data, {\n    emojisToShowFilter,\n    include,\n    exclude,\n    custom,\n    recent,\n    recentLength = 20\n  } = {}) {\n    this._data = uncompress(data); // Callback to exclude specific emojis\n\n    this._emojisFilter = emojisToShowFilter || null; // Categories to include / exclude\n\n    this._include = include || null;\n    this._exclude = exclude || null; // Custom emojis\n\n    this._custom = custom || []; // Recent emojis\n    // TODO: make parameter configurable\n\n    this._recent = recent || frequently.get(recentLength);\n    this._emojis = {};\n    this._nativeEmojis = {};\n    this._emoticons = {};\n    this._categories = [];\n    this._recentCategory = {\n      id: 'recent',\n      name: 'Recent',\n      emojis: []\n    };\n    this._customCategory = {\n      id: 'custom',\n      name: 'Custom',\n      emojis: []\n    };\n    this._searchIndex = {};\n    this.buildIndex();\n    Object.freeze(this);\n  }\n\n  buildIndex() {\n    let allCategories = this._data.categories;\n\n    if (this._include) {\n      // Remove categories that are not in the include list.\n      allCategories = allCategories.filter(item => {\n        return this._include.includes(item.id);\n      }); // Sort categories according to the include list.\n\n      allCategories = allCategories.sort((a, b) => {\n        const indexA = this._include.indexOf(a.id);\n\n        const indexB = this._include.indexOf(b.id);\n\n        if (indexA < indexB) {\n          return -1;\n        }\n\n        if (indexA > indexB) {\n          return 1;\n        }\n\n        return 0;\n      });\n    }\n\n    allCategories.forEach(categoryData => {\n      if (!this.isCategoryNeeded(categoryData.id)) {\n        return;\n      }\n\n      let category = {\n        id: categoryData.id,\n        name: categoryData.name,\n        emojis: []\n      };\n      categoryData.emojis.forEach(emojiId => {\n        let emoji = this.addEmoji(emojiId);\n\n        if (emoji) {\n          category.emojis.push(emoji);\n        }\n      });\n\n      if (category.emojis.length) {\n        this._categories.push(category);\n      }\n    });\n\n    if (this.isCategoryNeeded('custom')) {\n      if (this._custom.length > 0) {\n        for (let customEmoji of this._custom) {\n          this.addCustomEmoji(customEmoji);\n        }\n      }\n\n      if (this._customCategory.emojis.length) {\n        this._categories.push(this._customCategory);\n      }\n    }\n\n    if (this.isCategoryNeeded('recent')) {\n      if (this._recent.length) {\n        this._recent.map(id => {\n          for (let customEmoji of this._customCategory.emojis) {\n            if (customEmoji.id === id) {\n              this._recentCategory.emojis.push(customEmoji);\n\n              return;\n            }\n          }\n\n          if (this.hasEmoji(id)) {\n            this._recentCategory.emojis.push(this.emoji(id));\n          }\n\n          return;\n        });\n      } // Add recent category to the top\n\n\n      if (this._recentCategory.emojis.length) {\n        this._categories.unshift(this._recentCategory);\n      }\n    }\n  }\n  /**\n   * Find the emoji from the string\n   */\n\n\n  findEmoji(emoji, skin) {\n    // 1. Parse as :emoji_name:skin-tone-xx:\n    let matches = emoji.match(COLONS_REGEX);\n\n    if (matches) {\n      emoji = matches[1];\n\n      if (matches[2]) {\n        skin = parseInt(matches[2], 10);\n      }\n    } // 2. Check if the specified emoji is an alias\n\n\n    if (this._data.aliases.hasOwnProperty(emoji)) {\n      emoji = this._data.aliases[emoji];\n    } // 3. Check if we have the specified emoji\n\n\n    if (this._emojis.hasOwnProperty(emoji)) {\n      let emojiObject = this._emojis[emoji];\n\n      if (skin) {\n        return emojiObject.getSkin(skin);\n      }\n\n      return emojiObject;\n    } // 4. Check if we have the specified native emoji\n\n\n    if (this._nativeEmojis.hasOwnProperty(emoji)) {\n      return this._nativeEmojis[emoji];\n    }\n\n    return null;\n  }\n\n  categories() {\n    return this._categories;\n  }\n\n  emoji(emojiId) {\n    if (this._data.aliases.hasOwnProperty(emojiId)) {\n      emojiId = this._data.aliases[emojiId];\n    }\n\n    let emoji = this._emojis[emojiId];\n\n    if (!emoji) {\n      throw new Error('Can not find emoji by id: ' + emojiId);\n    }\n\n    return emoji;\n  }\n\n  firstEmoji() {\n    let emoji = this._emojis[Object.keys(this._emojis)[0]];\n\n    if (!emoji) {\n      throw new Error('Can not get first emoji');\n    }\n\n    return emoji;\n  }\n\n  hasEmoji(emojiId) {\n    if (this._data.aliases.hasOwnProperty(emojiId)) {\n      emojiId = this._data.aliases[emojiId];\n    }\n\n    if (this._emojis[emojiId]) {\n      return true;\n    }\n\n    return false;\n  }\n\n  nativeEmoji(unicodeEmoji) {\n    if (this._nativeEmojis.hasOwnProperty(unicodeEmoji)) {\n      return this._nativeEmojis[unicodeEmoji];\n    }\n\n    return null;\n  }\n\n  search(value, maxResults) {\n    maxResults || (maxResults = 75);\n\n    if (!value.length) {\n      return null;\n    }\n\n    if (value == '-' || value == '-1') {\n      return [this.emoji('-1')];\n    }\n\n    let values = value.toLowerCase().split(/[\\s|,|\\-|_]+/);\n    let allResults = [];\n\n    if (values.length > 2) {\n      values = [values[0], values[1]];\n    }\n\n    allResults = values.map(value => {\n      // Start searchin in the global list of emojis\n      let emojis = this._emojis;\n      let currentIndex = this._searchIndex;\n      let length = 0;\n\n      for (let charIndex = 0; charIndex < value.length; charIndex++) {\n        const char = value[charIndex];\n        length++;\n        currentIndex[char] || (currentIndex[char] = {});\n        currentIndex = currentIndex[char];\n\n        if (!currentIndex.results) {\n          let scores = {};\n          currentIndex.results = [];\n          currentIndex.emojis = {};\n\n          for (let emojiId in emojis) {\n            let emoji = emojis[emojiId]; // search is a comma-separated string with words, related\n            // to the emoji, for example:\n            // search: \"smiley,smiling,face,joy,haha,:d,:),smile,funny,=),=-)\",\n\n            let search = emoji._data.search;\n            let sub = value.substr(0, length);\n            let subIndex = search.indexOf(sub);\n\n            if (subIndex != -1) {\n              let score = subIndex + 1;\n              if (sub == emojiId) score = 0;\n              currentIndex.results.push(emoji);\n              currentIndex.emojis[emojiId] = emoji;\n              scores[emojiId] = score;\n            }\n          }\n\n          currentIndex.results.sort((a, b) => {\n            var aScore = scores[a.id],\n                bScore = scores[b.id];\n            return aScore - bScore;\n          });\n        } // continue search in the reduced set of emojis\n\n\n        emojis = currentIndex.emojis;\n      }\n\n      return currentIndex.results; // The \"filter\" call removes undefined values from allResults\n      // array, for example, if we have \"test \" (with trailing space),\n      // we will get \"[Array, undefined]\" for allResults and after\n      // the \"filter\" call it will turn into \"[Array]\"\n    }).filter(a => a);\n    var results = null;\n\n    if (allResults.length > 1) {\n      results = intersect.apply(null, allResults);\n    } else if (allResults.length) {\n      results = allResults[0];\n    } else {\n      results = [];\n    }\n\n    if (results && results.length > maxResults) {\n      results = results.slice(0, maxResults);\n    }\n\n    return results;\n  }\n\n  addCustomEmoji(customEmoji) {\n    let emojiData = Object.assign({}, customEmoji, {\n      id: customEmoji.short_names[0],\n      custom: true\n    });\n\n    if (!emojiData.search) {\n      emojiData.search = buildSearch(emojiData);\n    }\n\n    let emoji = new EmojiData(emojiData);\n    this._emojis[emoji.id] = emoji;\n\n    this._customCategory.emojis.push(emoji);\n\n    return emoji;\n  }\n\n  addEmoji(emojiId) {\n    // We expect the correct emoji id that is present in the emojis data.\n    let data = this._data.emojis[emojiId];\n\n    if (!this.isEmojiNeeded(data)) {\n      return false;\n    }\n\n    let emoji = new EmojiData(data);\n    this._emojis[emojiId] = emoji;\n\n    if (emoji.native) {\n      this._nativeEmojis[emoji.native] = emoji;\n    }\n\n    if (emoji._skins) {\n      for (let idx in emoji._skins) {\n        let skin = emoji._skins[idx];\n\n        if (skin.native) {\n          this._nativeEmojis[skin.native] = skin;\n        }\n      }\n    }\n\n    if (emoji.emoticons) {\n      emoji.emoticons.forEach(emoticon => {\n        if (this._emoticons[emoticon]) {\n          return;\n        }\n\n        this._emoticons[emoticon] = emojiId;\n      });\n    }\n\n    return emoji;\n  }\n  /**\n   * Check if we need to include given category.\n   *\n   * @param {string} category_id - The category id.\n   * @return {boolean} - Whether to include the emoji.\n   */\n\n\n  isCategoryNeeded(category_id) {\n    let isIncluded = this._include && this._include.length ? this._include.indexOf(category_id) > -1 : true;\n    let isExcluded = this._exclude && this._exclude.length ? this._exclude.indexOf(category_id) > -1 : false;\n\n    if (!isIncluded || isExcluded) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if we need to include given emoji.\n   *\n   * @param {object} emoji - The raw emoji object.\n   * @return {boolean} - Whether to include the emoji.\n   */\n\n\n  isEmojiNeeded(emoji) {\n    if (this._emojisFilter) {\n      return this._emojisFilter(emoji);\n    }\n\n    return true;\n  }\n\n}\nexport class EmojiData {\n  constructor(data) {\n    this._data = Object.assign({}, data);\n    this._skins = null;\n\n    if (this._data.skin_variations) {\n      this._skins = [];\n\n      for (var skinIdx in SKINS) {\n        let skinKey = SKINS[skinIdx];\n        let variationData = this._data.skin_variations[skinKey];\n        let skinData = Object.assign({}, data);\n\n        for (let k in variationData) {\n          skinData[k] = variationData[k];\n        }\n\n        delete skinData.skin_variations;\n        skinData['skin_tone'] = parseInt(skinIdx) + 1;\n\n        this._skins.push(new EmojiData(skinData));\n      }\n    }\n\n    this._sanitized = sanitize(this._data);\n\n    for (let key in this._sanitized) {\n      this[key] = this._sanitized[key];\n    }\n\n    this.short_names = this._data.short_names;\n    this.short_name = this._data.short_names[0];\n    Object.freeze(this);\n  }\n\n  getSkin(skinIdx) {\n    if (skinIdx && skinIdx != 'native' && this._skins) {\n      return this._skins[skinIdx - 1];\n    }\n\n    return this;\n  }\n\n  getPosition() {\n    let adjustedColumns = SHEET_COLUMNS - 1,\n        x = +(100 / adjustedColumns * this._data.sheet_x).toFixed(2),\n        y = +(100 / adjustedColumns * this._data.sheet_y).toFixed(2);\n    return `${x}% ${y}%`;\n  }\n\n  ariaLabel() {\n    return [this.native].concat(this.short_names).filter(Boolean).join(', ');\n  }\n\n}\nexport class EmojiView {\n  /**\n   * emoji - Emoji to display\n   * set - string, emoji set name\n   * native - boolean, whether to render native emoji\n   * fallback - fallback function to render missing emoji, optional\n   * emojiTooltip - wether we need to show the emoji tooltip, optional\n   * emojiSize - emoji size in pixels, optional\n   */\n  constructor(emoji, skin, set, native, fallback, emojiTooltip, emojiSize) {\n    this._emoji = emoji;\n    this._native = native;\n    this._skin = skin;\n    this._set = set;\n    this._fallback = fallback;\n    this.canRender = this._canRender();\n    this.cssClass = this._cssClass();\n    this.cssStyle = this._cssStyle(emojiSize);\n    this.content = this._content();\n    this.title = emojiTooltip === true ? emoji.short_name : null;\n    this.ariaLabel = emoji.ariaLabel();\n    Object.freeze(this);\n  }\n\n  getEmoji() {\n    return this._emoji.getSkin(this._skin);\n  }\n\n  _canRender() {\n    return this._isCustom() || this._isNative() || this._hasEmoji() || this._fallback;\n  }\n\n  _cssClass() {\n    return ['emoji-set-' + this._set, 'emoji-type-' + this._emojiType()];\n  }\n\n  _cssStyle(emojiSize) {\n    let cssStyle = {};\n\n    if (this._isCustom()) {\n      cssStyle = {\n        backgroundImage: 'url(' + this.getEmoji()._data.imageUrl + ')',\n        backgroundSize: '100%',\n        width: emojiSize + 'px',\n        height: emojiSize + 'px'\n      };\n    } else if (this._hasEmoji() && !this._isNative()) {\n      cssStyle = {\n        backgroundPosition: this.getEmoji().getPosition()\n      };\n    }\n\n    if (emojiSize) {\n      if (this._isNative()) {\n        // Set font-size for native emoji.\n        cssStyle = Object.assign(cssStyle, {\n          // font-size is used for native emoji which we need\n          // to scale with 0.95 factor to have them look approximately\n          // the same size as image-based emoji.\n          fontSize: Math.round(emojiSize * 0.95 * 10) / 10 + 'px'\n        });\n      } else {\n        // Set width/height for image emoji.\n        cssStyle = Object.assign(cssStyle, {\n          width: emojiSize + 'px',\n          height: emojiSize + 'px'\n        });\n      }\n    }\n\n    return cssStyle;\n  }\n\n  _content() {\n    if (this._isCustom()) {\n      return '';\n    }\n\n    if (this._isNative()) {\n      return this.getEmoji().native;\n    }\n\n    if (this._hasEmoji()) {\n      return '';\n    }\n\n    return this._fallback ? this._fallback(this.getEmoji()) : null;\n  }\n\n  _isNative() {\n    return this._native;\n  }\n\n  _isCustom() {\n    return this.getEmoji().custom;\n  }\n\n  _hasEmoji() {\n    if (!this.getEmoji()._data) {\n      // Return false if we have no data.\n      return false;\n    }\n\n    const hasImage = this.getEmoji()._data['has_img_' + this._set];\n\n    if (hasImage === undefined) {\n      // If there is no has_img_xxx in the data, we are working with\n      // specific data file, like facebook.json, so we assume all\n      // emojis are available (the :set setting for picker should\n      // match the data file).\n      return true;\n    } // Otherwise, we are using all.json and can switch between different\n    // sets - in this case the `has_img_{set_name}` is a boolean that\n    // indicates if there is such image or not for a given set.\n\n\n    return hasImage;\n  }\n\n  _emojiType() {\n    if (this._isCustom()) {\n      return 'custom';\n    }\n\n    if (this._isNative()) {\n      return 'native';\n    }\n\n    if (this._hasEmoji()) {\n      return 'image';\n    }\n\n    return 'fallback';\n  }\n\n}\nexport function sanitize(emoji) {\n  var {\n    name,\n    short_names,\n    skin_tone,\n    skin_variations,\n    emoticons,\n    unified,\n    custom,\n    imageUrl\n  } = emoji,\n      id = emoji.id || short_names[0],\n      colons = `:${id}:`;\n\n  if (custom) {\n    return {\n      id,\n      name,\n      colons,\n      emoticons,\n      custom,\n      imageUrl\n    };\n  }\n\n  if (skin_tone) {\n    colons += `:skin-tone-${skin_tone}:`;\n  }\n\n  return {\n    id,\n    name,\n    colons,\n    emoticons,\n    unified: unified.toLowerCase(),\n    skin: skin_tone || (skin_variations ? 1 : null),\n    native: unifiedToNative(unified)\n  };\n}","map":{"version":3,"names":["intersect","unifiedToNative","uncompress","buildSearch","frequently","SHEET_COLUMNS","COLONS_REGEX","SKINS","EmojiIndex","constructor","data","emojisToShowFilter","include","exclude","custom","recent","recentLength","_data","_emojisFilter","_include","_exclude","_custom","_recent","get","_emojis","_nativeEmojis","_emoticons","_categories","_recentCategory","id","name","emojis","_customCategory","_searchIndex","buildIndex","Object","freeze","allCategories","categories","filter","item","includes","sort","a","b","indexA","indexOf","indexB","forEach","categoryData","isCategoryNeeded","category","emojiId","emoji","addEmoji","push","length","customEmoji","addCustomEmoji","map","hasEmoji","unshift","findEmoji","skin","matches","match","parseInt","aliases","hasOwnProperty","emojiObject","getSkin","Error","firstEmoji","keys","nativeEmoji","unicodeEmoji","search","value","maxResults","values","toLowerCase","split","allResults","currentIndex","charIndex","char","results","scores","sub","substr","subIndex","score","aScore","bScore","apply","slice","emojiData","assign","short_names","EmojiData","isEmojiNeeded","native","_skins","idx","emoticons","emoticon","category_id","isIncluded","isExcluded","skin_variations","skinIdx","skinKey","variationData","skinData","k","_sanitized","sanitize","key","short_name","getPosition","adjustedColumns","x","sheet_x","toFixed","y","sheet_y","ariaLabel","concat","Boolean","join","EmojiView","set","fallback","emojiTooltip","emojiSize","_emoji","_native","_skin","_set","_fallback","canRender","_canRender","cssClass","_cssClass","cssStyle","_cssStyle","content","_content","title","getEmoji","_isCustom","_isNative","_hasEmoji","_emojiType","backgroundImage","imageUrl","backgroundSize","width","height","backgroundPosition","fontSize","Math","round","hasImage","undefined","skin_tone","unified","colons"],"sources":["C:/Users/multicampus/Desktop/새 폴더2/S07P12C202/frontend/owo/node_modules/emoji-mart-vue-fast/src/utils/emoji-data.js"],"sourcesContent":["import { intersect, unifiedToNative } from './index'\nimport { uncompress, buildSearch } from './data'\nimport frequently from './frequently'\n\nconst SHEET_COLUMNS = 61\nconst COLONS_REGEX = /^(?:\\:([^\\:]+)\\:)(?:\\:skin-tone-(\\d)\\:)?$/\n// Skin tones\nconst SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF']\n\n/**\n * Emoji data structure:\n * {\n *    \"compressed\": false,\n *    \"aliases\": {\n *      collision: \"boom\"\n *      cooking: \"fried_egg\"\n *      envelope: \"email\"\n *      face_with_finger_covering_closed_lips: \"shushing_face\"\n *      ...\n *    },\n *    \"categories\": [ {\n *      id: \"people\",\n *      name: \"Smileys & Emotion\",\n *      emojis: [ \"grinning\", \"grin\", \"joy\", ... ]\n *    }, {\n *      id: \"nature\",\n *      name: \"Animals & Nature\",\n *      emojis: [ \"monkey_face\", \"money\", \"gorilla\", ... ]\n *    },\n *    ...\n *    ],\n *    \"emojis\": [\n *      smiley: {\n *        added_in: \"6.0\",\n *        emoticons: [\"=)\", \"=-)\"],\n *        has_img_apple: true,\n *        has_img_facebook: true,\n *        has_img_google: true,\n *        has_img_twitter: true,\n *        keywords: [\"face\", \"happy\", \"joy\", \"haha\", \":D\", \":)\", \"smile\", \"funny\"],\n *        name: \"Smiling Face with Open Mouth\",\n *        non_qualified: undefined,\n *        search: \"smiley,smiling,face,with,open,mouth,happy,joy,haha,:d,:),smile,funny,=),=-)\",\n *        sheet_x: 30,\n *        sheet_y: 27,\n *        short_names: [\"smiley\"],\n *        text: \":)\",\n *        unified: \"1F603\",\n *      }, {\n *      +1: {    // emoji with skin_variations\n *          ..., // all the regular fields are present\n *          name: \"Thumbs Up Sign\",\n *          short_names: (2) [\"+1\", \"thumbsup\"],\n *          skin_variations: {\n *            1F3FB:             // each variation has additional set of fields:\n *              added_in: \"8.0\",\n *              has_img_apple: true,\n *              has_img_facebook: true,\n *              has_img_google: true,\n *              has_img_twitter: true,\n *              image: \"1f44d-1f3fb.png\",\n *              non_qualified: null,\n *              sheet_x: 14,\n *              sheet_y: 50,\n *              unified: \"1F44D-1F3FB\",\n *            1F3FB: {…},\n *            1F3FC: {…},\n *            1F3FD: {…},\n *            1F3FE: {…},\n *            1F3FF: {…}\n *            },\n *          ...\n *      },\n *      a: {  // emoji with non_qualified field set\n *        added_in: \"6.0\",\n *        emoticons: undefined,\n *        has_img_apple: true,\n *        ...\n *        non_qualified: \"1F170\",\n *        unified: \"1F170-FE0F\",\n *     },\n *     ...\n *   ]\n * }\n */\n\n/**\n * Wraps raw jason emoji data, serves as data source for\n * emoji picker components.\n *\n * Usage:\n *\n *   import data from '../data/all.json'\n *   let index = new EmojiIndex(data)\n *\n */\nexport class EmojiIndex {\n  /**\n   * Constructor.\n   *\n   * @param {object} data - Raw json data, see the structure above.\n   * @param {object} options - additional options, as an object:\n   * @param {Function} emojisToShowFilter - optional, function to filter out\n   *   some emojis, function(emoji) { return true|false }\n   *   where `emoji` is an raw emoji object, see data.emojis above.\n   * @param {Array} include - optional, a list of category ids to include.\n   * @param {Array} exclude - optional, a list of category ids to exclude.\n   * @param {Array} custom - optional, a list custom emojis, each emoji is\n   *   an object, see data.emojis above for examples.\n   */\n  constructor(\n    data,\n    {\n      emojisToShowFilter,\n      include,\n      exclude,\n      custom,\n      recent,\n      recentLength = 20,\n    } = {},\n  ) {\n    this._data = uncompress(data)\n    // Callback to exclude specific emojis\n    this._emojisFilter = emojisToShowFilter || null\n    // Categories to include / exclude\n    this._include = include || null\n    this._exclude = exclude || null\n    // Custom emojis\n    this._custom = custom || []\n    // Recent emojis\n    // TODO: make parameter configurable\n    this._recent = recent || frequently.get(recentLength)\n\n    this._emojis = {}\n    this._nativeEmojis = {}\n    this._emoticons = {}\n\n    this._categories = []\n    this._recentCategory = { id: 'recent', name: 'Recent', emojis: [] }\n    this._customCategory = { id: 'custom', name: 'Custom', emojis: [] }\n    this._searchIndex = {}\n    this.buildIndex()\n    Object.freeze(this)\n  }\n\n  buildIndex() {\n    let allCategories = this._data.categories\n\n    if (this._include) {\n      // Remove categories that are not in the include list.\n      allCategories = allCategories.filter((item) => {\n        return this._include.includes(item.id)\n      })\n      // Sort categories according to the include list.\n      allCategories = allCategories.sort((a, b) => {\n        const indexA = this._include.indexOf(a.id)\n        const indexB = this._include.indexOf(b.id)\n        if (indexA < indexB) {\n          return -1\n        }\n        if (indexA > indexB) {\n          return 1\n        }\n        return 0\n      })\n    }\n\n    allCategories.forEach((categoryData) => {\n      if (!this.isCategoryNeeded(categoryData.id)) {\n        return\n      }\n      let category = {\n        id: categoryData.id,\n        name: categoryData.name,\n        emojis: [],\n      }\n      categoryData.emojis.forEach((emojiId) => {\n        let emoji = this.addEmoji(emojiId)\n        if (emoji) {\n          category.emojis.push(emoji)\n        }\n      })\n      if (category.emojis.length) {\n        this._categories.push(category)\n      }\n    })\n\n    if (this.isCategoryNeeded('custom')) {\n      if (this._custom.length > 0) {\n        for (let customEmoji of this._custom) {\n          this.addCustomEmoji(customEmoji)\n        }\n      }\n      if (this._customCategory.emojis.length) {\n        this._categories.push(this._customCategory)\n      }\n    }\n\n    if (this.isCategoryNeeded('recent')) {\n      if (this._recent.length) {\n        this._recent.map((id) => {\n          for (let customEmoji of this._customCategory.emojis) {\n            if (customEmoji.id === id) {\n              this._recentCategory.emojis.push(customEmoji)\n              return\n            }\n          }\n          if (this.hasEmoji(id)) {\n            this._recentCategory.emojis.push(this.emoji(id))\n          }\n          return\n        })\n      }\n      // Add recent category to the top\n      if (this._recentCategory.emojis.length) {\n        this._categories.unshift(this._recentCategory)\n      }\n    }\n  }\n\n  /**\n   * Find the emoji from the string\n   */\n  findEmoji(emoji, skin) {\n    // 1. Parse as :emoji_name:skin-tone-xx:\n    let matches = emoji.match(COLONS_REGEX)\n\n    if (matches) {\n      emoji = matches[1]\n      if (matches[2]) {\n        skin = parseInt(matches[2], 10)\n      }\n    }\n\n    // 2. Check if the specified emoji is an alias\n    if (this._data.aliases.hasOwnProperty(emoji)) {\n      emoji = this._data.aliases[emoji]\n    }\n\n    // 3. Check if we have the specified emoji\n    if (this._emojis.hasOwnProperty(emoji)) {\n      let emojiObject = this._emojis[emoji]\n      if (skin) {\n        return emojiObject.getSkin(skin)\n      }\n      return emojiObject\n    }\n\n    // 4. Check if we have the specified native emoji\n    if (this._nativeEmojis.hasOwnProperty(emoji)) {\n      return this._nativeEmojis[emoji]\n    }\n    return null\n  }\n\n  categories() {\n    return this._categories\n  }\n\n  emoji(emojiId) {\n    if (this._data.aliases.hasOwnProperty(emojiId)) {\n      emojiId = this._data.aliases[emojiId]\n    }\n    let emoji = this._emojis[emojiId]\n    if (!emoji) {\n      throw new Error('Can not find emoji by id: ' + emojiId)\n    }\n    return emoji\n  }\n\n  firstEmoji() {\n    let emoji = this._emojis[Object.keys(this._emojis)[0]]\n    if (!emoji) {\n      throw new Error('Can not get first emoji')\n    }\n    return emoji\n  }\n\n  hasEmoji(emojiId) {\n    if (this._data.aliases.hasOwnProperty(emojiId)) {\n      emojiId = this._data.aliases[emojiId]\n    }\n    if (this._emojis[emojiId]) {\n      return true\n    }\n    return false\n  }\n\n  nativeEmoji(unicodeEmoji) {\n    if (this._nativeEmojis.hasOwnProperty(unicodeEmoji)) {\n      return this._nativeEmojis[unicodeEmoji]\n    }\n    return null\n  }\n\n  search(value, maxResults) {\n    maxResults || (maxResults = 75)\n    if (!value.length) {\n      return null\n    }\n    if (value == '-' || value == '-1') {\n      return [this.emoji('-1')]\n    }\n\n    let values = value.toLowerCase().split(/[\\s|,|\\-|_]+/)\n    let allResults = []\n\n    if (values.length > 2) {\n      values = [values[0], values[1]]\n    }\n\n    allResults = values\n      .map((value) => {\n        // Start searchin in the global list of emojis\n        let emojis = this._emojis\n        let currentIndex = this._searchIndex\n        let length = 0\n\n        for (let charIndex = 0; charIndex < value.length; charIndex++) {\n          const char = value[charIndex]\n          length++\n\n          currentIndex[char] || (currentIndex[char] = {})\n          currentIndex = currentIndex[char]\n\n          if (!currentIndex.results) {\n            let scores = {}\n            currentIndex.results = []\n            currentIndex.emojis = {}\n\n            for (let emojiId in emojis) {\n              let emoji = emojis[emojiId]\n              // search is a comma-separated string with words, related\n              // to the emoji, for example:\n              // search: \"smiley,smiling,face,joy,haha,:d,:),smile,funny,=),=-)\",\n              let search = emoji._data.search\n              let sub = value.substr(0, length)\n              let subIndex = search.indexOf(sub)\n              if (subIndex != -1) {\n                let score = subIndex + 1\n                if (sub == emojiId) score = 0\n\n                currentIndex.results.push(emoji)\n                currentIndex.emojis[emojiId] = emoji\n\n                scores[emojiId] = score\n              }\n            }\n            currentIndex.results.sort((a, b) => {\n              var aScore = scores[a.id],\n                bScore = scores[b.id]\n              return aScore - bScore\n            })\n          }\n\n          // continue search in the reduced set of emojis\n          emojis = currentIndex.emojis\n        }\n        return currentIndex.results\n        // The \"filter\" call removes undefined values from allResults\n        // array, for example, if we have \"test \" (with trailing space),\n        // we will get \"[Array, undefined]\" for allResults and after\n        // the \"filter\" call it will turn into \"[Array]\"\n      })\n      .filter((a) => a)\n\n    var results = null\n    if (allResults.length > 1) {\n      results = intersect.apply(null, allResults)\n    } else if (allResults.length) {\n      results = allResults[0]\n    } else {\n      results = []\n    }\n    if (results && results.length > maxResults) {\n      results = results.slice(0, maxResults)\n    }\n    return results\n  }\n\n  addCustomEmoji(customEmoji) {\n    let emojiData = Object.assign({}, customEmoji, {\n      id: customEmoji.short_names[0],\n      custom: true,\n    })\n    if (!emojiData.search) {\n      emojiData.search = buildSearch(emojiData)\n    }\n    let emoji = new EmojiData(emojiData)\n    this._emojis[emoji.id] = emoji\n    this._customCategory.emojis.push(emoji)\n    return emoji\n  }\n\n  addEmoji(emojiId) {\n    // We expect the correct emoji id that is present in the emojis data.\n    let data = this._data.emojis[emojiId]\n\n    if (!this.isEmojiNeeded(data)) {\n      return false\n    }\n\n    let emoji = new EmojiData(data)\n    this._emojis[emojiId] = emoji\n    if (emoji.native) {\n      this._nativeEmojis[emoji.native] = emoji\n    }\n    if (emoji._skins) {\n      for (let idx in emoji._skins) {\n        let skin = emoji._skins[idx]\n        if (skin.native) {\n          this._nativeEmojis[skin.native] = skin\n        }\n      }\n    }\n\n    if (emoji.emoticons) {\n      emoji.emoticons.forEach((emoticon) => {\n        if (this._emoticons[emoticon]) {\n          return\n        }\n        this._emoticons[emoticon] = emojiId\n      })\n    }\n    return emoji\n  }\n\n  /**\n   * Check if we need to include given category.\n   *\n   * @param {string} category_id - The category id.\n   * @return {boolean} - Whether to include the emoji.\n   */\n  isCategoryNeeded(category_id) {\n    let isIncluded =\n      this._include && this._include.length\n        ? this._include.indexOf(category_id) > -1\n        : true\n    let isExcluded =\n      this._exclude && this._exclude.length\n        ? this._exclude.indexOf(category_id) > -1\n        : false\n    if (!isIncluded || isExcluded) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Check if we need to include given emoji.\n   *\n   * @param {object} emoji - The raw emoji object.\n   * @return {boolean} - Whether to include the emoji.\n   */\n  isEmojiNeeded(emoji) {\n    if (this._emojisFilter) {\n      return this._emojisFilter(emoji)\n    }\n    return true\n  }\n}\n\nexport class EmojiData {\n  constructor(data) {\n    this._data = Object.assign({}, data)\n    this._skins = null\n    if (this._data.skin_variations) {\n      this._skins = []\n      for (var skinIdx in SKINS) {\n        let skinKey = SKINS[skinIdx]\n        let variationData = this._data.skin_variations[skinKey]\n        let skinData = Object.assign({}, data)\n        for (let k in variationData) {\n          skinData[k] = variationData[k]\n        }\n        delete skinData.skin_variations\n        skinData['skin_tone'] = parseInt(skinIdx) + 1\n        this._skins.push(new EmojiData(skinData))\n      }\n    }\n    this._sanitized = sanitize(this._data)\n    for (let key in this._sanitized) {\n      this[key] = this._sanitized[key]\n    }\n    this.short_names = this._data.short_names\n    this.short_name = this._data.short_names[0]\n    Object.freeze(this)\n  }\n\n  getSkin(skinIdx) {\n    if (skinIdx && skinIdx != 'native' && this._skins) {\n      return this._skins[skinIdx - 1]\n    }\n    return this\n  }\n\n  getPosition() {\n    let adjustedColumns = SHEET_COLUMNS - 1,\n      x = +((100 / adjustedColumns) * this._data.sheet_x).toFixed(2),\n      y = +((100 / adjustedColumns) * this._data.sheet_y).toFixed(2)\n    return `${x}% ${y}%`\n  }\n\n  ariaLabel() {\n    return [this.native].concat(this.short_names).filter(Boolean).join(', ')\n  }\n}\n\nexport class EmojiView {\n  /**\n   * emoji - Emoji to display\n   * set - string, emoji set name\n   * native - boolean, whether to render native emoji\n   * fallback - fallback function to render missing emoji, optional\n   * emojiTooltip - wether we need to show the emoji tooltip, optional\n   * emojiSize - emoji size in pixels, optional\n   */\n  constructor(emoji, skin, set, native, fallback, emojiTooltip, emojiSize) {\n    this._emoji = emoji\n    this._native = native\n    this._skin = skin\n    this._set = set\n    this._fallback = fallback\n\n    this.canRender = this._canRender()\n    this.cssClass = this._cssClass()\n    this.cssStyle = this._cssStyle(emojiSize)\n    this.content = this._content()\n    this.title = emojiTooltip === true ? emoji.short_name : null\n    this.ariaLabel = emoji.ariaLabel()\n\n    Object.freeze(this)\n  }\n\n  getEmoji() {\n    return this._emoji.getSkin(this._skin)\n  }\n\n  _canRender() {\n    return (\n      this._isCustom() || this._isNative() || this._hasEmoji() || this._fallback\n    )\n  }\n\n  _cssClass() {\n    return ['emoji-set-' + this._set, 'emoji-type-' + this._emojiType()]\n  }\n\n  _cssStyle(emojiSize) {\n    let cssStyle = {}\n    if (this._isCustom()) {\n      cssStyle = {\n        backgroundImage: 'url(' + this.getEmoji()._data.imageUrl + ')',\n        backgroundSize: '100%',\n        width: emojiSize + 'px',\n        height: emojiSize + 'px',\n      }\n    } else if (this._hasEmoji() && !this._isNative()) {\n      cssStyle = {\n        backgroundPosition: this.getEmoji().getPosition(),\n      }\n    }\n    if (emojiSize) {\n      if (this._isNative()) {\n        // Set font-size for native emoji.\n        cssStyle = Object.assign(cssStyle, {\n          // font-size is used for native emoji which we need\n          // to scale with 0.95 factor to have them look approximately\n          // the same size as image-based emoji.\n          fontSize: Math.round(emojiSize * 0.95 * 10) / 10 + 'px',\n        })\n      } else {\n        // Set width/height for image emoji.\n        cssStyle = Object.assign(cssStyle, {\n          width: emojiSize + 'px',\n          height: emojiSize + 'px',\n        })\n      }\n    }\n    return cssStyle\n  }\n\n  _content() {\n    if (this._isCustom()) {\n      return ''\n    }\n    if (this._isNative()) {\n      return this.getEmoji().native\n    }\n    if (this._hasEmoji()) {\n      return ''\n    }\n    return this._fallback ? this._fallback(this.getEmoji()) : null\n  }\n\n  _isNative() {\n    return this._native\n  }\n\n  _isCustom() {\n    return this.getEmoji().custom\n  }\n\n  _hasEmoji() {\n    if (!this.getEmoji()._data) {\n      // Return false if we have no data.\n      return false\n    }\n    const hasImage = this.getEmoji()._data['has_img_' + this._set]\n    if (hasImage === undefined) {\n      // If there is no has_img_xxx in the data, we are working with\n      // specific data file, like facebook.json, so we assume all\n      // emojis are available (the :set setting for picker should\n      // match the data file).\n      return true\n    }\n    // Otherwise, we are using all.json and can switch between different\n    // sets - in this case the `has_img_{set_name}` is a boolean that\n    // indicates if there is such image or not for a given set.\n    return hasImage\n  }\n\n  _emojiType() {\n    if (this._isCustom()) {\n      return 'custom'\n    }\n    if (this._isNative()) {\n      return 'native'\n    }\n    if (this._hasEmoji()) {\n      return 'image'\n    }\n    return 'fallback'\n  }\n}\n\nexport function sanitize(emoji) {\n  var {\n      name,\n      short_names,\n      skin_tone,\n      skin_variations,\n      emoticons,\n      unified,\n      custom,\n      imageUrl,\n    } = emoji,\n    id = emoji.id || short_names[0],\n    colons = `:${id}:`\n\n  if (custom) {\n    return {\n      id,\n      name,\n      colons,\n      emoticons,\n      custom,\n      imageUrl,\n    }\n  }\n\n  if (skin_tone) {\n    colons += `:skin-tone-${skin_tone}:`\n  }\n\n  return {\n    id,\n    name,\n    colons,\n    emoticons,\n    unified: unified.toLowerCase(),\n    skin: skin_tone || (skin_variations ? 1 : null),\n    native: unifiedToNative(unified),\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,eAApB,QAA2C,SAA3C;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,QAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,YAAY,GAAG,2CAArB,C,CACA;;AACA,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,OAA9C,CAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,CAAiB;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,CACTC,IADS,EAET;IACEC,kBADF;IAEEC,OAFF;IAGEC,OAHF;IAIEC,MAJF;IAKEC,MALF;IAMEC,YAAY,GAAG;EANjB,IAOI,EATK,EAUT;IACA,KAAKC,KAAL,GAAaf,UAAU,CAACQ,IAAD,CAAvB,CADA,CAEA;;IACA,KAAKQ,aAAL,GAAqBP,kBAAkB,IAAI,IAA3C,CAHA,CAIA;;IACA,KAAKQ,QAAL,GAAgBP,OAAO,IAAI,IAA3B;IACA,KAAKQ,QAAL,GAAgBP,OAAO,IAAI,IAA3B,CANA,CAOA;;IACA,KAAKQ,OAAL,GAAeP,MAAM,IAAI,EAAzB,CARA,CASA;IACA;;IACA,KAAKQ,OAAL,GAAeP,MAAM,IAAIX,UAA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"},"metadata":{},"sourceType":"module"}