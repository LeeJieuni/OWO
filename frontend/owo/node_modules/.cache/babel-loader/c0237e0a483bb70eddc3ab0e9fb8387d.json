{"ast":null,"code":"export default {\n  components: {},\n\n  data() {\n    return {\n      intervalTimer: null,\n      timeLeft: null,\n      wholeTime: 10,\n      isPaused: false,\n      isStarted: false,\n      length: Math.PI * 2 * 100,\n      timesetting: ''\n    };\n  },\n\n  setup() {},\n\n  created() {},\n\n  moundted() {},\n\n  unmounted() {},\n\n  methods: {\n    pauseTimer() {\n      const progressBar = document.querySelector('.e-c-progress');\n      progressBar.style.strokeDasharray = this.length;\n\n      if (this.isStarted === false) {\n        this.timer(this.wholeTime);\n        this.isStarted = true;\n      }\n    },\n\n    update(value, timePercent) {\n      const offset = +this.length - this.length * value / timePercent;\n      const progressBar = document.querySelector('.e-c-progress');\n      progressBar.style.strokeDashoffset = offset;\n      const pointer = document.getElementById('e-pointer');\n      pointer.style.transform = `rotate(${360 * value / timePercent}deg)`;\n    },\n\n    displayTimeLeft(timeLeft) {\n      // displays time on the input\n      const minutes = Math.floor(timeLeft / 60);\n      const seconds = timeLeft % 60;\n      const displayString = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n      this.timesetting = displayString;\n      this.update(timeLeft, this.wholeTime);\n    },\n\n    timer(seconds) {\n      // counts time, takes seconds\n      const remainTime = Date.now() + seconds * 1000;\n      this.displayTimeLeft(seconds);\n      this.intervalTimer = setInterval(() => {\n        this.timeLeft = Math.round((remainTime - Date.now()) / 1000);\n        console.log(this.timeLeft);\n\n        if (this.timeLeft < 0) {\n          clearInterval(this.intervalTimer);\n          this.isStarted = false;\n          this.displayTimeLeft(this.wholeTime);\n          return;\n        }\n\n        this.displayTimeLeft(this.timeLeft);\n      }, 1000);\n    }\n\n  }\n}; // update(wholeTime, wholeTime); // refreshes progress bar\n// displayTimeLeft(wholeTime);","map":{"version":3,"mappings":"AAsBA,eAAe;EACbA,UAAU,EAAE,EADC;;EAGbC,IAAI,GAAG;IACL,OAAO;MACLC,aAAa,EAAE,IADV;MAELC,QAAQ,EAAE,IAFL;MAGLC,SAAS,EAAE,EAHN;MAILC,QAAQ,EAAE,KAJL;MAKLC,SAAS,EAAE,KALN;MAMLC,MAAM,EAAEC,IAAI,CAACC,EAAL,GAAU,CAAV,GAAc,GANjB;MAOLC,WAAW,EAAE;IAPR,CAAP;EASD,CAbY;;EAcbC,KAAK,GAAG,CAAE,CAdG;;EAebC,OAAO,GAAG,CAAE,CAfC;;EAgBbC,QAAQ,GAAG,CAAE,CAhBA;;EAiBbC,SAAS,GAAG,CAAE,CAjBD;;EAkBbC,OAAO,EAAE;IACPC,UAAU,GAAG;MACX,MAAMC,WAAU,GAAIC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAApB;MACAF,WAAW,CAACG,KAAZ,CAAkBC,eAAlB,GAAoC,KAAKd,MAAzC;;MACA,IAAI,KAAKD,SAAL,KAAmB,KAAvB,EAA8B;QAC5B,KAAKgB,KAAL,CAAW,KAAKlB,SAAhB;QACA,KAAKE,SAAL,GAAiB,IAAjB;MACF;IACD,CARM;;IASPiB,MAAM,CAACC,KAAD,EAAQC,WAAR,EAAqB;MACzB,MAAMC,MAAK,GAAK,CAAC,KAAKnB,MAAP,GAAkB,KAAKA,MAAL,GAAciB,KAAf,GAAyBC,WAAzD;MACA,MAAMR,WAAU,GAAIC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAApB;MACAF,WAAW,CAACG,KAAZ,CAAkBO,gBAAlB,GAAqCD,MAArC;MACA,MAAME,OAAM,GAAIV,QAAQ,CAACW,cAAT,CAAwB,WAAxB,CAAhB;MACAD,OAAO,CAACR,KAAR,CAAcU,SAAd,GAA2B,UAAU,MAAMN,KAAP,GAAiBC,WAAa,MAAlE;IACD,CAfM;;IAgBPM,eAAe,CAAC5B,QAAD,EAAW;MAAE;MAC1B,MAAM6B,OAAM,GAAIxB,IAAI,CAACyB,KAAL,CAAW9B,QAAO,GAAI,EAAtB,CAAhB;MACA,MAAM+B,OAAM,GAAI/B,QAAO,GAAI,EAA3B;MACA,MAAMgC,aAAY,GAAK,GAAEH,OAAM,GAAI,EAAV,GAAe,GAAf,GAAqB,EAAG,GAAEA,OAAQ,IAAGE,OAAM,GAAI,EAAV,GAAe,GAAf,GAAqB,EAAG,GAAEA,OAAQ,EAAhG;MACA,KAAKxB,WAAL,GAAmByB,aAAnB;MACA,KAAKZ,MAAL,CAAYpB,QAAZ,EAAsB,KAAKC,SAA3B;IACD,CAtBM;;IAuBPkB,KAAK,CAACY,OAAD,EAAU;MAAE;MACf,MAAME,UAAS,GAAIC,IAAI,CAACC,GAAL,KAAcJ,OAAM,GAAI,IAA3C;MACA,KAAKH,eAAL,CAAqBG,OAArB;MACA,KAAKhC,aAAL,GAAqBqC,WAAW,CAAC,MAAM;QACrC,KAAKpC,QAAL,GAAgBK,IAAI,CAACgC,KAAL,CAAW,CAACJ,UAAS,GAAIC,IAAI,CAACC,GAAL,EAAd,IAA4B,IAAvC,CAAhB;QACAG,OAAO,CAACC,GAAR,CAAY,KAAKvC,QAAjB;;QACA,IAAI,KAAKA,QAAL,GAAgB,CAApB,EAAuB;UACrBwC,aAAa,CAAC,KAAKzC,aAAN,CAAb;UACA,KAAKI,SAAL,GAAiB,KAAjB;UACA,KAAKyB,eAAL,CAAqB,KAAK3B,SAA1B;UACA;QACF;;QACA,KAAK2B,eAAL,CAAqB,KAAK5B,QAA1B;MACD,CAV+B,EAU7B,IAV6B,CAAhC;IAWD;;EArCM;AAlBI,CAAf,C,CA0DA;AACA","names":["components","data","intervalTimer","timeLeft","wholeTime","isPaused","isStarted","length","Math","PI","timesetting","setup","created","moundted","unmounted","methods","pauseTimer","progressBar","document","querySelector","style","strokeDasharray","timer","update","value","timePercent","offset","strokeDashoffset","pointer","getElementById","transform","displayTimeLeft","minutes","floor","seconds","displayString","remainTime","Date","now","setInterval","round","console","log","clearInterval"],"sourceRoot":"","sources":["C:\\Users\\multicampus\\Desktop\\새 폴더2\\S07P12C202\\frontend\\owo\\src\\components\\Room\\setTimer2.vue"],"sourcesContent":["<template>\n<div style=\"position:relative\">\n  <div v-show=\"isStarted\" class=\"circle\">\n    <svg width=\"150\" style=\"background-color:white; border-radius: 50%;\" viewBox=\"0 0 220 220\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g transform=\"translate(110,110)\">\n        <circle r=\"100\" class=\"e-c-base\"/>\n        <g transform=\"rotate(-90)\">\n          <circle r=\"100\" class=\"e-c-progress\"/>\n          <g id=\"e-pointer\">\n            <circle cx=\"100\" cy=\"0\" r=\"8\" class=\"e-c-pointer\"/>\n          </g>\n        </g>\n      </g>\n    </svg>\n  </div>\n  <div v-show=\"isStarted\" class=\"controlls\">\n    <div class=\"display-remain-time\">{{timesetting}}</div>\n  </div>\n</div>\n</template>\n\n<script>\nexport default {\n  components: {\n  },\n  data() {\n    return {\n      intervalTimer: null,\n      timeLeft: null,\n      wholeTime: 10,\n      isPaused: false,\n      isStarted: false,\n      length: Math.PI * 2 * 100,\n      timesetting: '',\n    };\n  },\n  setup() {},\n  created() {},\n  moundted() {},\n  unmounted() {},\n  methods: {\n    pauseTimer() {\n      const progressBar = document.querySelector('.e-c-progress');\n      progressBar.style.strokeDasharray = this.length;\n      if (this.isStarted === false) {\n        this.timer(this.wholeTime);\n        this.isStarted = true;\n      }\n    },\n    update(value, timePercent) {\n      const offset = (+this.length) - (this.length * value) / (timePercent);\n      const progressBar = document.querySelector('.e-c-progress');\n      progressBar.style.strokeDashoffset = offset;\n      const pointer = document.getElementById('e-pointer');\n      pointer.style.transform = `rotate(${(360 * value) / (timePercent)}deg)`;\n    },\n    displayTimeLeft(timeLeft) { // displays time on the input\n      const minutes = Math.floor(timeLeft / 60);\n      const seconds = timeLeft % 60;\n      const displayString = `${minutes < 10 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n      this.timesetting = displayString;\n      this.update(timeLeft, this.wholeTime);\n    },\n    timer(seconds) { // counts time, takes seconds\n      const remainTime = Date.now() + (seconds * 1000);\n      this.displayTimeLeft(seconds);\n      this.intervalTimer = setInterval(() => {\n        this.timeLeft = Math.round((remainTime - Date.now()) / 1000);\n        console.log(this.timeLeft);\n        if (this.timeLeft < 0) {\n          clearInterval(this.intervalTimer);\n          this.isStarted = false;\n          this.displayTimeLeft(this.wholeTime);\n          return;\n        }\n        this.displayTimeLeft(this.timeLeft);\n      }, 1000);\n    },\n  },\n};\n// update(wholeTime, wholeTime); // refreshes progress bar\n// displayTimeLeft(wholeTime);\n</script>\n<style scoped>\n@import url('https://fonts.googleapis.com/css?family=Roboto:100,300');\n\nbutton[data-setter] {\n  outline: none;\n  background: transparent;\n  border: none;\n  font-family: 'Roboto';\n  font-weight: 300;\n  font-size: 18px;\n  width: 25px;\n  height: 30px;\n  color: #4E8Aff;\n  cursor: pointer;\n}\n\nbutton[data-setter]:hover { opacity: 0.5; }\n\n.container {\n  position: relative;\n  top: 0px;\n  width: 0px;\n  margin: 0 auto;\n}\n\n.setters {\n  position: absolute;\n  left: 85px;\n  top: 75px;\n}\n\n.minutes-set {\n  float: left;\n  margin-right: 28px;\n}\n\n.seconds-set { float: right; }\n\n.controlls {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.display-remain-time {\n  font-family: 'Roboto';\n  font-weight: 100;\n  font-size: 40px;\n  color: #4E8Aff;\n}\n\n#pause {\n  outline: none;\n  background: transparent;\n  border: none;\n  margin-top: 10px;\n  width: 50px;\n  height: 50px;\n  position: relative;\n}\n\n.play::before {\n  display: block;\n  content: \"\";\n  position: absolute;\n  top: 8px;\n  left: 16px;\n  border-top: 15px solid transparent;\n  border-bottom: 15px solid transparent;\n  border-left: 22px solid #4E8Aff;\n}\n\n.pause::after {\n  content: \"\";\n  position: absolute;\n  top: 8px;\n  left: 12px;\n  width: 15px;\n  height: 30px;\n  background-color: transparent;\n  border-radius: 1px;\n  border: 5px solid #4E8Aff;\n  border-top: none;\n  border-bottom: none;\n}\n\n#pause:hover { opacity: 0.8; }\n\n.e-c-base {\n  fill: none;\n  stroke: #B6B6B6;\n  stroke-width: 4px\n}\n\n.e-c-progress {\n  fill: none;\n  stroke: #4E8Aff;\n  stroke-width: 4px;\n  transition: stroke-dashoffset 0.7s;\n}\n\n.e-c-pointer {\n  fill: #FFF;\n  stroke: #4E8Aff;\n  stroke-width: 2px;\n}\n\n#e-pointer { transition: transform 0.7s; }\nh1 { margin-top:150px; text-align:center;}\nbody { background-color:#f7f7f7;}\n\n.mybtn5 {\n  background-color:transparent;\n  border:none;\n  position:fixed;\n  top:25%;\n  right:105px;\n  z-index: 700;\n}\n\n.menu_icon2 {\n  width:50px;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}